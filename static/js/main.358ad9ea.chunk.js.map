{"version":3,"sources":["utils/fetchClient.ts","utils/apiAction.ts","components/Loader/Loader.tsx","components/PostsList.tsx","utils/Empty-From-Data.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","apiActions","catch","e","id","Loader","className","PostsList","setPosts","userSelected","setErrorNotification","posts","setSelectedPost","selectedPost","isPostsLoading","setIsPostsLoading","useEffect","errorNotification","finally","length","map","post","title","type","classNames","onClick","current","handleSelectPost","EMPTY_FORM_DATA","email","name","NewCommentForm","postId","errors","onError","onSetComments","useState","isFormSubmit","setIsFormSubmit","hasEmptyField","setHasEmptyField","formData","setFormData","handleUpdateInfo","target","value","onSubmit","preventDefault","Object","values","some","f","trim","res","error","newComment","htmlFor","placeholder","onChange","PostDetails","comments","setComments","isLoading","setIsLoading","isAddComment","setIsAddComment","prevErr","comment","href","filter","UserSelector","setUserSelected","isSelected","setIsSelected","users","setUsers","role","onBlur","currentTarget","contains","relatedTarget","tabIndex","user","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.358ad9ea.chunk.js","sourcesContent":["import { CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\ntype MateApiData = Comment\n| Post\n| CommentData\n| User\n| Comment[]\n| Post[]\n| User[]\n| null;\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: MateApiData = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: MateApiData) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: MateApiData) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const apiActions = {\n  getAllUsers: () => {\n    return client.get<User[]>('/users')\n      .catch((e) => {\n        throw new Error(e);\n      });\n  },\n\n  getUserPosts: (id: number) => {\n    return client.get<Post[]>(`/posts?userId=${id}`);\n  },\n\n  getPostComments: (id: number) => {\n    return client.get<Comment[]>(`/comments?postId=${id}`);\n  },\n\n  addComment: (data: CommentData) => {\n    return client.post<Comment>('/comments', data);\n  },\n\n  deleteComment: (id: number) => {\n    return client.delete(`/comments/${id}`);\n  },\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { apiActions } from '../utils/apiAction';\nimport { User } from '../types/User';\nimport { ErrorNotification } from '../types/ErrorNotification';\nimport { Loader } from './Loader';\n\ntype Props = {\n  setPosts: (posts: Post[]) => void;\n  userSelected: User;\n  setErrorNotification: (error: (prevError: ErrorNotification)\n  => ErrorNotification) => void;\n  posts: Post[];\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n  selectedPost: Post | null;\n  isPostsLoading: boolean;\n  setIsPostsLoading: (postL: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  setPosts,\n  userSelected,\n  setErrorNotification,\n  posts,\n  setSelectedPost,\n  selectedPost,\n  isPostsLoading,\n  setIsPostsLoading,\n}) => {\n  useEffect(() => {\n    setIsPostsLoading(false);\n\n    apiActions.getUserPosts(userSelected.id)\n      .then(setPosts)\n      .catch(() => {\n        setErrorNotification((errorNotification) => ({\n          ...errorNotification,\n          posts: true,\n        }));\n      })\n      .finally(() => setIsPostsLoading(true));\n  }, [userSelected.id, setErrorNotification, setIsPostsLoading, setPosts]);\n\n  const handleSelectPost = (post: Post) => {\n    setSelectedPost((current) => (\n      current?.id === post.id ? null : post\n    ));\n  };\n\n  if (!isPostsLoading) {\n    return <Loader />;\n  }\n\n  if (!posts.length && isPostsLoading) {\n    return null;\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': selectedPost?.id !== post.id },\n                  )}\n                  onClick={() => handleSelectPost(post)}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","export const EMPTY_FORM_DATA = {\n  email: '',\n  name: '',\n  body: '',\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { ErrorNotification } from '../types/ErrorNotification';\nimport { Comment, CommentData } from '../types/Comment';\nimport { apiActions } from '../utils/apiAction';\nimport { EMPTY_FORM_DATA } from '../utils/Empty-From-Data';\n\ntype Props = {\n  postId: number,\n  errors: ErrorNotification,\n  onError: (error: (prevError: ErrorNotification)\n  => ErrorNotification) => void,\n  onSetComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  errors,\n  onError,\n  onSetComments,\n}) => {\n  const [isFormSubmit, setIsFormSubmit] = useState(false);\n  const [hasEmptyField, setHasEmptyField] = useState(false);\n  const [formData, setFormData] = useState<CommentData>(EMPTY_FORM_DATA);\n\n  const handleReset = () => {\n    setFormData(EMPTY_FORM_DATA);\n  };\n\n  const handleUpdateInfo = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    setFormData((current) => ({\n      ...current,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (Object.values(formData).some(f => !f.trim())) {\n      setHasEmptyField(true);\n\n      return;\n    }\n\n    setIsFormSubmit(true);\n    setHasEmptyField(false);\n\n    const data = {\n      ...formData,\n      postId,\n    };\n\n    apiActions.addComment(data)\n      .then((res) => onSetComments(current => ([\n        ...current,\n        res,\n      ])))\n      .catch(() => onError(error => ({\n        ...error,\n        newComment: true,\n      })))\n      .finally(() => setIsFormSubmit(false));\n\n    setFormData((current => ({\n      ...current,\n      body: '',\n    })));\n  };\n\n  const { name, body, email } = formData;\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        {errors.newComment && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': !name && hasEmptyField,\n            })}\n            onChange={handleUpdateInfo}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!name.trim() && hasEmptyField && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!name.trim() && hasEmptyField && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': !email && hasEmptyField,\n            })}\n            onChange={handleUpdateInfo}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!email.trim() && hasEmptyField && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!email.trim() && hasEmptyField && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': !body && hasEmptyField,\n            })}\n            onChange={handleUpdateInfo}\n          />\n        </div>\n\n        {!body.trim() && hasEmptyField && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isFormSubmit,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { ErrorNotification } from '../types/ErrorNotification';\nimport { apiActions } from '../utils/apiAction';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  errorNotification: ErrorNotification;\n  setErrorNotification: (error: (prevError: ErrorNotification)\n  => ErrorNotification) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  setErrorNotification,\n  errorNotification,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAddComment, setIsAddComment] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsAddComment(false);\n\n    apiActions.getPostComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setErrorNotification(\n        (prevErr: ErrorNotification) => ({ ...prevErr, comments: true }),\n      ))\n      .finally(() => setIsLoading(false));\n  }, [selectedPost, setErrorNotification]);\n\n  const handleDeleteComment = (id: number) => {\n    apiActions.deleteComment(id);\n    setComments((current) => (\n      current.filter(comment => comment.id !== id)\n    ));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {errorNotification.comments && !isLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments?.length === 0 && !isLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length !== 0 && !isLoading && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map((comment) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isAddComment && !isLoading && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsAddComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isAddComment && (\n          <NewCommentForm\n            errors={errorNotification}\n            onSetComments={setComments}\n            onError={setErrorNotification}\n            postId={selectedPost.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { User } from '../types/User';\nimport { apiActions } from '../utils/apiAction';\nimport { ErrorNotification } from '../types/ErrorNotification';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userSelected: User | null,\n  setUserSelected: (user: User) => void;\n  setErrorNotification: (error: (prevError: ErrorNotification)\n  => ErrorNotification) => void;\n  setSelectedPost?: (posts: Post) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  userSelected,\n  setUserSelected,\n  setErrorNotification,\n}) => {\n  const [isSelected, setIsSelected] = useState(false);\n  const [users, setUsers] = useState<User[] | null>(null);\n\n  const handleClickSelect = () => {\n    setIsSelected(!isSelected);\n  };\n\n  useEffect(() => {\n    apiActions.getAllUsers()\n      .then(setUsers)\n      .catch(() => {\n        setErrorNotification((error) => ({ ...error, users: true }));\n      });\n  }, [setErrorNotification]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isSelected })}\n      role=\"button\"\n      onBlur={(e) => {\n        if (!e.currentTarget.contains(e.relatedTarget)) {\n          setIsSelected(false);\n        }\n      }}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          tabIndex={0}\n          onClick={handleClickSelect}\n        >\n          <span>{userSelected ? `${userSelected.name}` : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isSelected && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div className=\"dropdown-content\">\n            {users?.map((user) => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  {\n                    'is-active':\n                      (userSelected\n                        && userSelected.id === user.id),\n                  },\n                )}\n                onClick={() => {\n                  setUserSelected(user);\n                  setIsSelected(false);\n                }}\n                key={user.id}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { ErrorNotification } from './types/ErrorNotification';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [userSelected, setUserSelected] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [errorNotification, setErrorNotification]\n    = useState<ErrorNotification>({\n      users: false,\n      posts: false,\n      comments: false,\n      newComment: false,\n    });\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  userSelected={userSelected}\n                  setUserSelected={setUserSelected}\n                  setErrorNotification={setErrorNotification}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!userSelected && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {errorNotification.users && (\n                  <div className=\"notification is-danger\">\n                    There are no users on the server\n                  </div>\n                )}\n\n                {errorNotification.posts && !userSelected && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts.length === 0 && userSelected && isPostsLoading && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {userSelected && (\n                  <PostsList\n                    setPosts={setPosts}\n                    userSelected={userSelected}\n                    setErrorNotification={setErrorNotification}\n                    posts={posts}\n                    setSelectedPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                    isPostsLoading={isPostsLoading}\n                    setIsPostsLoading={setIsPostsLoading}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {userSelected && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': selectedPost },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                {selectedPost && (\n                  <PostDetails\n                    selectedPost={selectedPost}\n                    setErrorNotification={setErrorNotification}\n                    errorNotification={errorNotification}\n                  />\n                )}\n              </div>\n            </div>\n          )}\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}